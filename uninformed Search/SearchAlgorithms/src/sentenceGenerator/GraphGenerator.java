package sentenceGenerator;

import java.util.ArrayList;
import java.util.Collections;

/**
 * Graph generate of the sentence generator
 * @author chenp
 *
 */
public class GraphGenerator {
	// word that can be generated by the generator
	public ArrayList<Element> words;
	// levels in the node so far
	private int level;
	
	// the nodes of the cuurrent level
	public ArrayList<Element> currentLevelNodes;
	
	public GraphGenerator(int[] costs, boolean isReverse) {
		words = new ArrayList<Element>();
		words.add(new Element("the", costs[0]));
		words.add(new Element("cat", costs[1]));
		words.add(new Element("sat", costs[2]));
		words.add(new Element("on", costs[3]));
		words.add(new Element("mat", costs[4]));
		currentLevelNodes = new ArrayList<Element>();
		Collections.sort(words);
		if(isReverse){
			Collections.reverse(words);
		}
		level = -1;
	}
	
	/**
	 * Generated the nodes of the next level, discard current level nodes
	 * @return nodes for next level
	 */
	public ArrayList<Element> getNextLevel(){
		level++;
		if(level == 0) {
			currentLevelNodes.add(new Element("", 0));
		}else {
			int length = currentLevelNodes.size();
			for(int i = 0; i < length; i++) {
				Element ce = currentLevelNodes.remove(0);
				for(Element ele : words) {
					Element e = new Element(ce.name +" "+ ele.name, ce.cost + ele.cost);
					currentLevelNodes.add(e);
				}
			}
		}
		return currentLevelNodes;
	}
	
	/**
	 * Given a node element, expend it using the expansion rule of this graph
	 * @param e: the element to be expand
	 * @return a list of e's subsequent state
	 */
	public ArrayList<Element> expand(Element e){
		ArrayList<Element> elements = new ArrayList<Element>();
		for(Element ele : words) {
			Element sub = new Element(e.name +" "+ ele.name, e.cost + ele.cost);
			elements.add(sub);
		}
		return elements;
	}
}
